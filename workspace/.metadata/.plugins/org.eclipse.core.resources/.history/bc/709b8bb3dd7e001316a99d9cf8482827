package se.legarre.ecommerce.repository.inMemoryImpl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import se.legarre.ecommerce.model.CategoryModel;
import se.legarre.ecommerce.repository.CategoryRepository;

public final class CategoryInMemoryImpl implements CategoryRepository
{
	private static int idCounter = 1000;

	Map<String, CategoryModel> categories;

	public CategoryInMemoryImpl()
	{
		categories = new HashMap<String, CategoryModel>();
	}

	
	@Override
	public CategoryModel saveCategory(CategoryModel category)
	{
		if (isNewCategory(category.getId()))
		{
			category = new CategoryModel(getNextId(), category);
		}

		categories.put(category.getId(), category);
		
		//We return a new model because we don't want that a model.setXXX change the object in our "InMemoryDB"
		return new CategoryModel(category);
	}

	@Override
	public List<CategoryModel> getAllCategories()
	{
		List<CategoryModel> listCategories = new ArrayList<CategoryModel>();
		for(CategoryModel category : categories.values()){
			listCategories.add(new CategoryModel(category));
		}
		
		List<CategoryModel> aux = new ArrayList<CategoryModel>(); 
				Collections.copy(aux, new ArrayList<CategoryModel>(categories.values())); 
		CategoryModel cm = aux.get(0);
		
		cm.setDesc("alooo");
		
		categories.get(cm.getId());
		
		return listCategories;
	}

	@Override
	public CategoryModel getCategory(String categoryId)
	{
		return null;
	}

	@Override
	public boolean removeCategory(String CategoryId)
	{
		return false;
	}

	private String getNextId()
	{
		idCounter++;
		return String.valueOf(idCounter);
	}

	private boolean isNewCategory(String id)
	{
		return CategoryModel.DEFAULT_ID.equals(id);
	}

}
